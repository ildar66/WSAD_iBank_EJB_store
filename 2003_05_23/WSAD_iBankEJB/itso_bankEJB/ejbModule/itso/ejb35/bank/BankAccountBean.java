package itso.ejb35.bank;

import javax.naming.*;
import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 */
public class BankAccountBean implements EntityBean {
    public String accID;
    public java.math.BigDecimal balance;
    private javax.ejb.EntityContext entityContext = null;
    private final static long serialVersionUID = 3206093459760846163L;
    protected itso.ejb35.bank.TransRecordHome txRecHomeCMP;
    protected boolean txRecHome = false; // TxRexHome not set yet
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink bankTransactionsLink = null;
	private transient com.ibm.ivj.ejb.associations.interfaces.ManyLink custAcctLink = null;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("balance", getBalance());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.math.BigDecimal localBalance = (java.math.BigDecimal) h.get("balance");

        if ( h.containsKey("balance") )
            setBalance((localBalance));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getBankTransactionsLink());
	links.addElement(getCustAcctLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	bankTransactionsLink = null;
	custAcctLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * This method was generated for supporting the association named AccountTransactions.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void addBankTransactions(itso.ejb35.bank.TransRecord aBankTransactions) throws java.rmi.RemoteException {
	this.getBankTransactionsLink().addElement(aBankTransactions);
}
/**
 * Insert the method's description here.
 * Creation date: (03.04.2003 16:15:22)
 * @param amount java.math.BigDecimal
 */
public void deposit(java.math.BigDecimal amount) {
    balance = balance.add(amount);
    try {
        setTxRecHome();
        //txRecHomeCMP.create(accID, amount, "D");
        txRecHomeCMP.create((BankAccount)(getEntityContext().getEJBObject()), amount, "D");
    }
    catch (Exception e) {
        System.out.println(" ==> transaction record failed");
        e.printStackTrace();
    }
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * Insert the method's description here.
 * Creation date: (03.04.2003 16:01:51)
 * @param argAccID java.lang.String
 * @param argBalance java.math.BigDecimal
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public BankAccountKey ejbCreate(String argAccID, java.math.BigDecimal argBalance)
    throws javax.ejb.CreateException, javax.ejb.EJBException {
    _initLinks();
    // All CMP fields should be initialized here.
    accID = argAccID;
    balance = argBalance;
    return null;
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * Insert the method's description here.
 * Creation date: (17.04.2003 12:11:17)
 * @param argAccID java.lang.String
 * @param argBalance java.math.BigDecimal
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPostCreate(String argAccID, java.math.BigDecimal argBalance)  {
    try {
        setTxRecHome();
        txRecHomeCMP.create(accID, balance, "C");
    }
    catch (Exception e) {
        e.printStackTrace();
    }
}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * Getter method for balance
 * @return java.math.BigDecimal
 */
public java.math.BigDecimal getBalance() {
	return balance;
}
/**
 * This method was generated for supporting the association named AccountTransactions.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getBankTransactions() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getBankTransactionsLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named AccountTransactions.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getBankTransactionsLink() {
	if (bankTransactionsLink == null)
		bankTransactionsLink = new BankAccountToBankTransactionsLink(this);
	return bankTransactionsLink;
}
/**
 * This method was generated for supporting the association named AccountToCustomer.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Enumeration getCustAcct() throws java.rmi.RemoteException, javax.ejb.FinderException {
	return this.getCustAcctLink().enumerationValue();
}
/**
 * This method was generated for supporting the association named AccountToCustomer.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.ManyLink getCustAcctLink() {
	if (custAcctLink == null)
		custAcctLink = new BankAccountToCustAcctLink(this);
	return custAcctLink;
}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * This method was generated for supporting the association named AccountTransactions.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddBankTransactions(itso.ejb35.bank.TransRecord aBankTransactions) {
	this.getBankTransactionsLink().secondaryAddElement(aBankTransactions);
}
/**
 * This method was generated for supporting the association named AccountToCustomer.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryAddCustAcct(itso.ejb35.bank.CustAcct aCustAcct) {
	this.getCustAcctLink().secondaryAddElement(aCustAcct);
}
/**
 * This method was generated for supporting the association named AccountTransactions.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemoveBankTransactions(itso.ejb35.bank.TransRecord aBankTransactions) {
	this.getBankTransactionsLink().secondaryRemoveElement(aBankTransactions);
}
/**
 * This method was generated for supporting the association named AccountToCustomer.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondaryRemoveCustAcct(itso.ejb35.bank.CustAcct aCustAcct) {
	this.getCustAcctLink().secondaryRemoveElement(aCustAcct);
}
/**
 * Setter method for balance
 * @param newValue java.math.BigDecimal
 */
public void setBalance(java.math.BigDecimal newValue) {
	this.balance = newValue;
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * Insert the method's description here.
 * Creation date: (03.04.2003 16:19:12)
 */
protected void setTxRecHome() {
    if (!txRecHome) {
        try {
            //Properties prop = new Properties();
            //prop.put( Context.PROVIDER_URL,"iiop:///" );
            //prop.put( Context.INITIAL_CONTEXT_FACTORY,
            // "com.ibm.ejs.ns.jndi.CNInitialContextFactory");
            //InitialContext ctx = new InitialContext(prop);
            InitialContext ctx = new InitialContext(); 
            txRecHomeCMP =
                (itso.ejb35.bank.TransRecordHome) javax.rmi.PortableRemoteObject.narrow(
                    ctx.lookup("itso/ejb35/bank/TransRecord"),
                    itso.ejb35.bank.TransRecordHome.class);
            txRecHome = true;
        }
        catch (NamingException exc) {
            System.out.println("Error retrieving the home");
            exc.printStackTrace();
        }
    }
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
/**
 * Insert the method's description here.
 * Creation date: (03.04.2003 16:16:49)
 * @param amount java.math.BigDecimal
 * @exception itso.ejb35.util.InsufficientFundException The exception description.
 */
public void withdraw(java.math.BigDecimal amount) throws itso.ejb35.util.InsufficientFundException {
    if (balance.compareTo(amount) == -1)
        throw new itso.ejb35.util.InsufficientFundException("Not enough funds");
    else
        balance = balance.subtract(amount);
    try {
        setTxRecHome();
        txRecHomeCMP.create((BankAccount)(getEntityContext().getEJBObject()), amount, "C");
    }
    catch (Exception e) {
        System.out.println(" ==> transaction record failed");
        e.printStackTrace();
    }
}
}
