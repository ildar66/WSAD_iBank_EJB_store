package itso.ejb35.bank;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 */
public class SavingsBean extends BankAccountBean {
	public java.math.BigDecimal minAmount;
	private final static long serialVersionUID = 3206093459760846163L;

/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("minAmount", getMinAmount());
        h.put("balance", getBalance());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.math.BigDecimal localMinAmount = (java.math.BigDecimal) h.get("minAmount");
        java.math.BigDecimal localBalance = (java.math.BigDecimal) h.get("balance");

        if ( h.containsKey("minAmount") )
            setMinAmount((localMinAmount));
        if ( h.containsKey("balance") )
            setBalance((localBalance));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = super._getLinks();
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	super._initLinks();
}
/**
 * Insert the method's description here.
 * Creation date: (15.04.2003 16:51:29)
 * @param argAccID java.lang.String
 * @param argBalance java.math.BigDecimal
 * @exception javax.ejb.CreateException The exception description.
 * @exception java.rmi.RemoteException The exception description.
 */
public BankAccountKey ejbCreate(String argAccID, java.math.BigDecimal argBalance)
    throws javax.ejb.CreateException, javax.ejb.EJBException {
    super.ejbCreate(argAccID, argBalance);
    _initLinks();
    // All CMP fields should be initialized here.
    minAmount = new java.math.BigDecimal(200.00);
    return null;
}
/**
 * Getter method for minAmount
 * @return java.math.BigDecimal
 */
public java.math.BigDecimal getMinAmount() {
	return minAmount;
}
/**
 * Setter method for minAmount
 * @param newValue java.math.BigDecimal
 */
public void setMinAmount(java.math.BigDecimal newValue) {
	this.minAmount = newValue;
}
/**
 * Insert the method's description here.
 * Creation date: (15.04.2003 17:03:59)
 * @param amount java.math.BigDecimal
 * @exception itso.ejb35.util.InsufficientFundException The exception description.
 */
public void withdraw(java.math.BigDecimal amount) throws itso.ejb35.util.InsufficientFundException {
    System.out.println("Withdraw from " + accID + " balance " + balance + " amount " + amount);
    if (balance.subtract(minAmount).compareTo(amount) == -1)
        throw new itso.ejb35.util.InsufficientFundException("Not enough funds");
    else
        balance = balance.subtract(amount);
    System.out.println(" ==> new balance " + balance);
    try {
        setTxRecHome();
        txRecHomeCMP.create((BankAccount)(getEntityContext().getEJBObject()), amount, "C");
        System.out.println(" ==> transaction record created");
    }
    catch (Exception e) {
        System.out.println(" ==> transaction record failed");
        e.printStackTrace();
    }
}
}
