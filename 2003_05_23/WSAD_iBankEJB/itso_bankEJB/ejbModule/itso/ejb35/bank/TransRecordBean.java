package itso.ejb35.bank;

import java.rmi.RemoteException;
import java.security.Identity;
import java.util.Properties;
import javax.ejb.*;
/**
 * This is an Entity Bean class with CMP fields
 */
public class TransRecordBean implements EntityBean {
	private javax.ejb.EntityContext entityContext = null;
	private final static long serialVersionUID = 3206093459760846163L;
	public java.math.BigDecimal transamt;
	public java.sql.Timestamp transID;
	public String transtype;
	public java.lang.String owningAccount_accID;
	private transient com.ibm.ivj.ejb.associations.interfaces.SingleLink owningAccountLink = null;
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public java.util.Hashtable _copyFromEJB() {
        com.ibm.ivj.ejb.runtime.AccessBeanHashtable h = new com.ibm.ivj.ejb.runtime.AccessBeanHashtable();

        h.put("transtype", getTranstype());
        h.put("owningAccountKey", getOwningAccountKey());
        h.put("transamt", getTransamt());
        h.put("__Key", getEntityContext().getPrimaryKey());

        return h;

}
/**
 * This method was generated by the VisualAge for Java EJB AccessBean tool.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void _copyToEJB(java.util.Hashtable h) {
        java.lang.String localTranstype = (java.lang.String) h.get("transtype");
        java.math.BigDecimal localTransamt = (java.math.BigDecimal) h.get("transamt");

        if ( h.containsKey("transtype") )
            setTranstype((localTranstype));
        if ( h.containsKey("transamt") )
            setTransamt((localTransamt));

}
/**
 * This method was generated for supporting the associations.
 * @return java.util.Vector
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected java.util.Vector _getLinks() {
	java.util.Vector links = new java.util.Vector();
	links.addElement(getOwningAccountLink());
	return links;
}
/**
 * This method was generated for supporting the associations.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _initLinks() {
	owningAccountLink = null;
}
/**
 * This method was generated for supporting the associations.
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected void _removeLinks() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	java.util.Enumeration links = _getLinks().elements();
	while (links.hasMoreElements()) {
		try {
			((com.ibm.ivj.ejb.associations.interfaces.Link) (links.nextElement())).remove();
		}
		catch (javax.ejb.FinderException e) {} //Consume Finder error since I am going away
	}
}
/**
 * ejbActivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbActivate() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * Insert the method's description here.
 * Creation date: (16.04.2003 13:15:11)
 * @param acct itso.ejb35.bank.BankAccount
 * @param anAmount java.math.BigDecimal
 * @param aTranstype java.lang.String
 * @exception javax.ejb.CreateException The exception description.
 * @exception javax.ejb.EJBException The exception description.
 */
public TransRecordKey ejbCreate(BankAccount acct, java.math.BigDecimal anAmount, String aTranstype)
    throws javax.ejb.CreateException, javax.ejb.EJBException, java.rmi.RemoteException{
    _initLinks();
    // All CMP fields should be initialized here.
    transID = new java.sql.Timestamp(System.currentTimeMillis());
    transtype = aTranstype;
    transamt = anAmount;
    setOwningAccount(acct);
    return null;
}
/**
 * ejbCreate method for a CMP entity bean
 * @param argTransID java.sql.Timestamp
 * @exception javax.ejb.CreateException The exception description.
 * @exception javax.ejb.EJBException The exception description.
 */
public TransRecordKey ejbCreate(String anAccID, java.math.BigDecimal anAmount, String aTranstype)
    throws javax.ejb.CreateException, javax.ejb.EJBException {
    _initLinks();
    // All CMP fields should be initialized here.
    transID = new java.sql.Timestamp(System.currentTimeMillis());
    transtype = aTranstype;
    transamt = anAmount;
    privateSetOwningAccountKey( new BankAccountKey(anAccID) );
    return null;
}
/**
 * ejbLoad method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbLoad() throws java.rmi.RemoteException {
	_initLinks();
}
/**
 * ejbPassivate method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbPassivate() throws java.rmi.RemoteException {}
/**
 * ejbPostCreate method for a CMP entity bean
 * @param argTransID java.sql.Timestamp
  */
public void ejbPostCreate(String anAccID, java.math.BigDecimal anAmount, String aTranstype) {}
/**
 * Insert the method's description here.
 * Creation date: (16.04.2003 13:15:11)
 * @param acct itso.ejb35.bank.BankAccount
 * @param anAmount java.math.BigDecimal
 * @param aTranstype java.lang.String
 * @exception javax.ejb.CreateException The exception description.
 * @exception javax.ejb.EJBException The exception description.
 */
public void ejbPostCreate(BankAccount acct, java.math.BigDecimal anAmount, String aTranstype){}
/**
 * ejbRemove method comment
 * @exception java.rmi.RemoteException The exception description.
 * @exception javax.ejb.RemoveException The exception description.
 */
public void ejbRemove() throws java.rmi.RemoteException, javax.ejb.RemoveException {
	_removeLinks();
}
/**
 * ejbStore method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void ejbStore() throws java.rmi.RemoteException {}
/**
 * getEntityContext method comment
 * @return javax.ejb.EntityContext
 */
public javax.ejb.EntityContext getEntityContext() {
	return entityContext;
}
/**
 * This method was generated for supporting the association named AccountTransactions.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public itso.ejb35.bank.BankAccount getOwningAccount() throws  java.rmi.RemoteException, javax.ejb.FinderException {
	return (itso.ejb35.bank.BankAccount)this.getOwningAccountLink().value();
}
/**
 * This method was generated for supporting the association named AccountTransactions.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public itso.ejb35.bank.BankAccountKey getOwningAccountKey() {
	itso.ejb35.bank.BankAccountKey temp = null;
	temp = new itso.ejb35.bank.BankAccountKey();
	boolean owningAccount_NULLTEST = true;
	owningAccount_NULLTEST &= (owningAccount_accID == null);
	temp.accID = owningAccount_accID;
	if (owningAccount_NULLTEST) temp = null;
	return temp;
}
/**
 * This method was generated for supporting the association named AccountTransactions.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
protected com.ibm.ivj.ejb.associations.interfaces.SingleLink getOwningAccountLink() {
	if (owningAccountLink == null)
		owningAccountLink = new TransRecordToOwningAccountLink(this);
	return owningAccountLink;
}
/**
 * Getter method for transamt
 * @return java.math.BigDecimal
 */
public java.math.BigDecimal getTransamt() {
	return transamt;
}
/**
 * Getter method for transtype
 * @return java.lang.String
 */
public java.lang.String getTranstype() {
	return transtype;
}
/**
 * This method was generated for supporting the association named AccountTransactions.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void privateSetOwningAccountKey(itso.ejb35.bank.BankAccountKey inKey) {
	boolean owningAccount_NULLTEST = (inKey == null);
	if (owningAccount_NULLTEST) owningAccount_accID = null; else owningAccount_accID = inKey.accID;
}
/**
 * This method was generated for supporting the association named AccountTransactions.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void secondarySetOwningAccount(itso.ejb35.bank.BankAccount anOwningAccount) throws java.rmi.RemoteException {
	this.getOwningAccountLink().secondarySet(anOwningAccount);
}
/**
 * setEntityContext method comment
 * @param ctx javax.ejb.EntityContext
 * @exception java.rmi.RemoteException The exception description.
 */
public void setEntityContext(javax.ejb.EntityContext ctx) throws java.rmi.RemoteException {
	entityContext = ctx;
}
/**
 * This method was generated for supporting the association named AccountTransactions.  
 * 	It will be deleted/edited when the association is deleted/edited.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void setOwningAccount(itso.ejb35.bank.BankAccount anOwningAccount) throws java.rmi.RemoteException {
	this.getOwningAccountLink().set(anOwningAccount);
}
/**
 * Setter method for transamt
 * @param newValue java.math.BigDecimal
 */
public void setTransamt(java.math.BigDecimal newValue) {
	this.transamt = newValue;
}
/**
 * Setter method for transtype
 * @param newValue java.lang.String
 */
public void setTranstype(java.lang.String newValue) {
	this.transtype = newValue;
}
/**
 * unsetEntityContext method comment
 * @exception java.rmi.RemoteException The exception description.
 */
public void unsetEntityContext() throws java.rmi.RemoteException {
	entityContext = null;
}
}
